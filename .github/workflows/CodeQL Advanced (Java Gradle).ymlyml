# 대부분의 프로젝트에서 이 워크플로우 파일은 변경할 필요가 없습니다. 단순히 저장소에 커밋하면 됩니다.
#
# 분석할 언어 집합을 재정의하거나, 사용자 정의 쿼리 또는 빌드 로직을 제공하기 위해 이 파일을 변경할 수 있습니다.
#
# ******** 참고 ********
# 저장소의 언어를 감지하려고 시도했습니다. 아래에 정의된 `language` 매트릭스를 확인하여
# 올바른 CodeQL 지원 언어 집합이 있는지 확인하십시오.
#
name: "CodeQL Advanced (Java Gradle)" # 워크플로우 이름을 Java Gradle용으로 명확히 변경

on:
  push:
    branches:
      - "*/working"  
      - "*/main"
  pull_request:
    branches:
      - "*/working"
      - "*/main"
jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # 러너 크기는 CodeQL 분석 시간에 영향을 미칩니다. 자세한 내용은 다음을 참조하십시오:
    # - https://gh.io/recommended-hardware-resources-for-running-codeql
    # - https://gh.io/supported-runners-and-hardware-resources
    # - https://gh.io/using-larger-runners (GitHub.com만 해당)
    # 분석 시간 개선을 위해 더 큰 러너 또는 더 많은 리소스가 있는 머신 사용을 고려하십시오.
    runs-on: ubuntu-latest # Java/Gradle 프로젝트는 'ubuntu-latest'로 충분합니다.
    permissions:
      # 모든 워크플로우에 필요
      security-events: write

      # 내부 또는 private CodeQL 팩을 가져오는 데 필요
      packages: read

      # private 저장소의 워크플로우에만 필요
      actions: read
      contents: read

    strategy:
      fail-fast: false # 매트릭스 중 하나라도 실패해도 다른 매트릭스는 계속 실행
      matrix:
        include:
          # Java Gradle 프로젝트를 분석하도록 설정합니다.
          # Kotlin이 포함된 경우 'java-kotlin'으로 유지하고 아래 'Build Java project' 스텝에서 Kotlin 빌드 명령어 추가
          - language: java      # 자바를 사용하도록 명시
            build-mode: manual  # Gradle 프로젝트는 'manual' 빌드 모드를 권장합니다.
            # 이를 통해 CodeQL이 빌드 과정을 정확히 모니터링할 수 있습니다.

        # CodeQL은 다음 값을 'language' 키워드로 지원합니다: 'actions', 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'rust', 'swift'
        # C, C++ 또는 둘 다로 작성된 코드를 분석하려면 `c-cpp`를 사용합니다.
        # Java, Kotlin 또는 둘 다로 작성된 코드를 분석하려면 'java-kotlin'을 사용합니다.
        # JavaScript, TypeScript 또는 둘 다로 작성된 코드를 분석하려면 'javascript-typescript'를 사용합니다.
        # 분석할 언어 변경 또는 분석을 위한 빌드 모드 사용자 지정에 대해 자세히 알아보려면,
        # https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning을 참조하십시오.
        # 컴파일된 언어를 분석하는 경우, 코드베이스가 분석되는 방식을 사용자 지정하기 위해 해당 언어의 'build-mode'를 수정할 수 있습니다.
        # https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages을 참조하십시오.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # 레포지토리 코드를 워크플로우 실행 환경으로 가져옵니다.

      # `github/codeql-action/init` 액션을 실행하기 전에 필요한 모든 설정 단계를 추가하십시오.
      # 여기에는 컴파일러 또는 런타임 설치(예: `actions/setup-java`)와 같은 단계가 포함됩니다.
      # 이는 일반적으로 수동 빌드에만 필요합니다.
      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Java 배포판 선택 (예: temurin, zulu, adopt)
          java-version: '17'      # 프로젝트에 맞는 Java 버전으로 변경하세요 (예: '11', '21')
          cache: 'gradle'         # Gradle 캐싱을 활성화하여 빌드 속도 향상

      # CodeQL 스캔을 위한 CodeQL 도구를 초기화합니다.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          # 사용자 정의 쿼리를 지정하려면 여기에 또는 구성 파일에 지정할 수 있습니다.
          # 기본적으로 여기에 나열된 쿼리는 구성 파일에 지정된 모든 쿼리를 재정의합니다.
          # 이 쿼리와 구성 파일의 쿼리를 함께 사용하려면 여기에 있는 목록 앞에 "+"를 붙이십시오.

          # CodeQL의 쿼리 팩에 대한 자세한 내용은 다음을 참조: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality

      # 빌드 단계에서 "자동으로 코드를 빌드할 수 없었습니다" 오류가 발생하면
      # 위 매트릭스에서 해당 언어의 빌드 모드를 "manual"로 설정하십시오.
      # 그런 다음 이 단계를 수정하여 코드를 빌드하십시오.
      # OS 셸을 사용하여 실행할 명령줄 프로그램입니다.
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun 참조
      - name: Build Java project # 빌드 단계를 명확히 구분
        if: matrix.build-mode == 'manual' # 'manual' 빌드 모드일 때만 실행
        shell: bash
        run: |
          echo "Starting Gradle build for CodeQL analysis..."
          # 프로젝트의 실제 빌드 명령어를 여기에 입력하세요.
          # 예를 들어, `gradle build`, `gradle clean build`, 또는 특정 태스크를 실행합니다.
          # CodeQL이 모든 소스 파일을 볼 수 있도록 전체 빌드가 필요합니다.
          ./gradlew build -x test # 👈 Gradle Wrapper를 사용하여 빌드하고 테스트 제외
          
          # 중요: 프로젝트가 성공적으로 빌드되어야 CodeQL이 정확한 데이터를 수집할 수 있습니다.
          # 이 빌드 명령어가 본인의 Gradle 프로젝트에 맞는지 확인하세요.
          echo "Gradle build completed."


      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3 # CodeQL 분석을 수행합니다.
        with:
          category: "/language:${{matrix.language}}" # 분석할 언어 카테고리 지
